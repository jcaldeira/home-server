version: "3.5"
services:
  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    # Network mode of 'host' exposes the ports on the host. This is needed for DLNA access.
    network_mode: host
    volumes:
      - jellyfin-config:/config
      - jellyfin-cache:/cache
      - media-fs:/media-fs
    restart: always
    # devices:
    #   # VAAPI Devices
    #   - /dev/dri/renderD128:/dev/dri/renderD128
    #   - /dev/dri/card0:/dev/dri/card0
    extra_hosts:
      - host.docker.internal:host-gateway
    labels:
      traefik.enable: true
      traefik.http.routers.jellyfin-local.rule: Host(`jellyfin.home`) || Host(`jf.home`)
      traefik.http.routers.jellyfin-local.entrypoints: websecure
      traefik.http.routers.jellyfin-local.tls: true
      traefik.http.routers.jellyfin-local.service: jellyfin-svc@file

      traefik.http.routers.jellyfin.rule: Host(`jf-240-caldeira.duckdns.org`)
      # traefik.http.routers.jellyfin.rule: Host(`240-caldeira.duckdns.org`) && (PathPrefix(`/jellyfin`) || PathPrefix(`/jellyfin/`))
      traefik.http.routers.jellyfin.entrypoints: websecure
      traefik.http.routers.jellyfin.tls: true
      traefik.http.routers.jellyfin.tls.certresolver: production

      traefik.http.routers.jellyfin.middlewares: jellyfin-mw #,jellyfin-strip
      # traefik.http.middlewares.jellyfin-strip.stripprefix.prefixes: /jellyfin
      # traefik.http.middlewares.jellyfin-strip.stripprefix.forceslash: false
      #### The customResponseHeaders option lists the Header names and values to apply to the response.
      traefik.http.middlewares.jellyfin-mw.headers.customResponseHeaders.X-Robots-Tag: noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex
      #### The sslRedirect is set to true, then only allow websecure requests.
      traefik.http.middlewares.jellyfin-mw.headers.SSLRedirect: true
      #### The sslHost option is the host name that is used to redirect http requests to websecure.
      #### This is the exact URL that will be redirected to, so you can remove the :9999 port if using default SSL port
      traefik.http.middlewares.jellyfin-mw.headers.SSLHost: jf-240-caldeira.duckdns.org
      #### Set sslForceHost to true and set SSLHost to forced requests to use SSLHost even the ones that are already using SSL.
      #### Note that this uses SSLHost verbatim, so add the port to SSLHost if you are using an alternate port.
      traefik.http.middlewares.jellyfin-mw.headers.SSLForceHost: true
      #### The stsSeconds is the max-age of the Strict-Transport-Security header. If set to 0, would NOT include the header.
      traefik.http.middlewares.jellyfin-mw.headers.STSSeconds: 315360000
      #### The stsIncludeSubdomains is set to true, the includeSubDomains directive will be
      #### appended to the Strict-Transport-Security header.
      traefik.http.middlewares.jellyfin-mw.headers.STSIncludeSubdomains: true
      #### Set stsPreload to true to have the preload flag appended to the Strict-Transport-Security header.
      traefik.http.middlewares.jellyfin-mw.headers.STSPreload: true
      #### Set forceSTSHeader to true, to add the STS header even when the connection is HTTP.
      traefik.http.middlewares.jellyfin-mw.headers.forceSTSHeader: true
      #### Set frameDeny to true to add the X-Frame-Options header with the value of DENY.
      traefik.http.middlewares.jellyfin-mw.headers.frameDeny: true
      #### Set contentTypeNosniff to true to add the X-Content-Type-Options header with the value nosniff.
      traefik.http.middlewares.jellyfin-mw.headers.contentTypeNosniff: true
      #### Set browserXssFilter to true to add the X-XSS-Protection header with the value 1; mode=block.
      traefik.http.middlewares.jellyfin-mw.headers.customresponseheaders.X-XSS-PROTECTION: 1
      ### The customFrameOptionsValue allows the X-Frame-Options header value to be set with a custom value. This
      ### overrides the FrameDeny option.
      # traefik.http.middlewares.jellyfin-mw.headers.customFrameOptionsValue: 'allow-from websecure://240-caldeira.duckdns.org'
      # HTTP Service
      # We define the port here as a port is required, but note that the service is pointing to the service defined in @file
      traefik.http.routers.jellyfin.service: jellyfin-svc@file
      traefik.http.services.jellyfin-svc.loadBalancer.server.port: 8096
      traefik.http.services.jellyfin-svc.loadBalancer.passHostHeader: true


volumes:
  jellyfin-config:
    name: jellyfin-config
    driver: local
    driver_opts:
      type: nfs
      o: addr=truenas.home,nfsvers=4
      device: :/mnt/bpool/docker_volumes/jellyfin/jellyfin-config
  jellyfin-cache:
    name: jellyfin-cache
    driver: local
    driver_opts:
      type: nfs
      o: addr=truenas.home,nfsvers=4
      device: :/mnt/bpool/docker_volumes/jellyfin/jellyfin-cache
  media-fs:
    name: jellyfin-media-fs
    driver: local
    driver_opts:
      type: nfs
      o: addr=truenas.home,nfsvers=4
      device: :/mnt/bpool/media-fs


# networks:
#   traefik:
#     external: true
